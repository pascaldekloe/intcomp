// This file is generated, do not modify directly
// Use 'go generate' to regenerate.

package intcomp

{{- $dp := .}}

{{- range $dpn := $dp.Dpn }}

func deltapack{{$dp.Bits}}_{{$dpn.N}}[T uint{{$dp.Bits}}|int{{$dp.Bits}}](initoffset T, in *[{{$dp.Bits}}]T, out *[{{$dpn.N}}]uint{{$dp.Bits}}) {
{{- range $dpnb := $dpn.Dpnb }}
	out[{{$dpnb.I}}] = uint{{$dp.Bits}}(
{{- range $line := $dpnb.PackLines }}
	 {{$line}}
{{- end }})
{{- end }}
}

{{- if $dp.WithNtz }}
func deltapack{{$dp.Bits}}_ntz_{{$dpn.N}}[T uint{{$dp.Bits}}|int{{$dp.Bits}}](initoffset T, in *[{{$dp.Bits}}]T, out *[{{$dpn.N}}]uint{{$dp.Bits}}, ntz int) {
	ntz = ntz&({{$dp.Bits}}-1) //nolint:ineffassign,staticcheck
{{- range $dpnb := $dpn.Dpnb }}
	out[{{$dpnb.I}}] = uint{{$dp.Bits}}(
{{- range $line := $dpnb.PackLinesNtz }}
	 {{$line}}
{{- end }})
{{- end }}
}

{{- end }}
{{- end }}

{{- range $dpn := $dp.Dpn }}

func deltaunpack{{$dp.Bits}}_{{$dpn.N}}[T uint{{$dp.Bits}}|int{{$dp.Bits}}](initoffset T, in *[{{$dpn.N}}]uint{{$dp.Bits}}, out *[{{$dp.Bits}}]T) {
{{- range $dunb := $dpn.Dunb }}
	out[{{$dunb.I}}] = {{$dunb.UnpackLine}}
{{- end }}
}

{{- if $dp.WithNtz }}
func deltaunpack{{$dp.Bits}}_ntz_{{$dpn.N}}[T uint{{$dp.Bits}}|int{{$dp.Bits}}](initoffset T, in *[{{$dpn.N}}]uint{{$dp.Bits}}, out *[{{$dp.Bits}}]T, ntz int) {
	ntz = ntz&({{$dp.Bits}}-1)  //nolint:ineffassign,staticcheck
{{- range $dunb := $dpn.Dunb }}
	out[{{$dunb.I}}] = {{$dunb.UnpackLineNtz}}
{{- end }}
}

{{- end }}
{{- end }}

// --- zigzag

{{- range $dpn := $dp.Dpn }}

func deltapackzigzag{{$dp.Bits}}_{{$dpn.N}}[T uint{{$dp.Bits}}|int{{$dp.Bits}}](initoffset T, in *[{{$dp.Bits}}]T, out *[{{$dpn.N}}]uint{{$dp.Bits}}) {
{{- range $dpnb := $dpn.Dpnb }}
	out[{{$dpnb.I}}] = uint{{$dp.Bits}}(
{{- range $line := $dpnb.PackLinesZigZag }}
	{{$line}}
{{- end }})
{{- end }}
}

{{- if $dp.WithNtz }}
func deltapackzigzag{{$dp.Bits}}_ntz_{{$dpn.N}}[T uint{{$dp.Bits}}|int{{$dp.Bits}}](initoffset T, in *[{{$dp.Bits}}]T, out *[{{$dpn.N}}]uint{{$dp.Bits}}, ntz int) {
{{- if $dp.WithNtz }}
	ntz = ntz&({{$dp.Bits}}-1) //nolint:ineffassign,staticcheck
{{- end }}
{{- range $dpnb := $dpn.Dpnb }}
	out[{{$dpnb.I}}] = uint{{$dp.Bits}}(
{{- range $line := $dpnb.PackLinesZigZagNtz }}
	{{$line}}
{{- end }})
{{- end }}
}

{{- end }}
{{- end }}

{{- range $dpn := $dp.Dpn }}

func deltaunpackzigzag{{$dp.Bits}}_{{$dpn.N}}[T uint{{$dp.Bits}}|int{{$dp.Bits}}](initoffset T, in *[{{$dpn.N}}]uint{{$dp.Bits}}, out *[{{$dp.Bits}}]T) {
{{- range $dunb := $dpn.Dunb }}
	out[{{$dunb.I}}] = {{$dunb.UnpackLineZigZag}}
{{- end }}
}

{{- if $dp.WithNtz }}
func deltaunpackzigzag{{$dp.Bits}}_ntz_{{$dpn.N}}[T uint{{$dp.Bits}}|int{{$dp.Bits}}](initoffset T, in *[{{$dpn.N}}]uint{{$dp.Bits}}, out *[{{$dp.Bits}}]T, ntz int) {
	ntz = ntz&({{$dp.Bits}}-1) //nolint:ineffassign,staticcheck
{{- range $dunb := $dpn.Dunb }}
	out[{{$dunb.I}}] = {{$dunb.UnpackLineZigZagNtz}}
{{- end }}
}

{{- end }}
{{- end }}
